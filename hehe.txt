


*************************************************************************
				Vector
*************************************************************************

---------- FT Vector (Constructors and iterator) ----------
The contents of fill vector are: 100 100 100 100
The contents of range vector are: 100 100 100 100 200
The contents of copy vector are: 100 100 100 100 200 300
The contents of other vector are: 16 2 77 29

------------- FT Vector (operator=)-------------
Size of foo: 0
Size of bar: 3
The contents of bar vector are: 100 100 100

---- FT Vector (iterator walk & comparison diferent iterators) ----
myvector contains: 1 2 3 4 5

------------- FT Vector (reverse iterator walk)-------------
myvector contains: 5 4 3 2 1

------------- FT Vector (size)-------------
size (should be 0):  0
size (should be 10): 10
size (should be 20): 20
size (should be 19): 19

------------- FT Vector (max_size)-------------
size: 100
max_size: 2305843009213693951

------------- FT Vector (resize)-------------
myvector contains 10 elements:                            0 1 2 3 4 5 6 7 8 9
myvector contains 5 elements:                             0 1 2 3 4
myvector contains 8 elements, filled up with value 0:     0 1 2 3 4 0 0 0
myvector contains 11 elements, filled up with value 100:  0 1 2 3 4 0 0 0 100 100 100

------------- FT Vector (capacity)-------------
capacity: 0
size: 0

myvector contains:  1
capacity: 1
size: 1

myvector contains:  1 2
capacity: 2
size: 2

myvector contains:  1 2 3
capacity: 4
size: 3

myvector contains:  1 2 3 4
capacity: 4
size: 4

myvector contains:  1 2 3 4 5
capacity: 8
size: 5

myvector contains:  1 2 3 4 5 6
capacity: 8
size: 6

myvector contains:  1 2 3 4 5 6 7
capacity: 8
size: 7

myvector contains:  1 2 3 4 5 6 7 8
capacity: 8
size: 8

myvector contains:  1 2 3 4 5 6 7 8 9
capacity: 16
size: 9

------------- FT Vector (empty)-------------
Is my vector empty?: 1
size after pushing values 1 to 9 included: 9
Is my vector empty?: 0
size after pop back until empty:           0
Is my vector empty?: 1

--------- FT Vector (reserve) ---------
Initial capacity: 16
Capacity should be the same: 16
Capacity should be 20: 20

------------- FT Vector (operator[])-------------
myvector contains: 0 1 2 3 4 5 6 7 8 9

------------- FT Vector (at)-------------
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 0 1 2 3 4 28 6 7 8 9
looking out of bounds

------------- FT Vector (front/back)-------------
myvector.front() (should be 78):   78
myvector.back()  (should be 16):   16
myvector.front() (should be 62):   62

------------- FT Vector (assign)-------------
myvector contains:  100 100 100
Size of first: 3

myvector contains:  200 200 200 200 200 200
Size of first: 6

myvector contains:  200 200 200 200
Size of second: 4

myvector contains:  1776 7 4
Size of first: 3

---------- FT Vector (push_back / pop_back) ----------
myvector contains:  15 78 99 45 78 99 65
Size of myvector1:     7

myvector contains:  15 78 99 45 78
Size of myvector1:     5


------------- FT Vector (clear)-------------
myvector contains: hola hi hello
myvector1 size:       3
CLEAR!
size after clear:     0
myvector contains: adios bye

------------- FT Vector (insert)-------------

myvector contains: 100 100 100
Its size is of     3

myvector contains: 100 100 100
Its size is of     3

myvector contains: 300 300 200 100 100 100
Its size is of     6

myvector contains: 300 300 400 400 200 100 100 100
Its size is of     8

myvector contains: 501 502 503 300 300 400 400 200 100 100 100
Its size is of     11

------------- FT Vector (erase)-------------
myvector contains: 1 2 3 4 5 6 7 8 9 10
myvector contains: 1 2 3 4 5 7 8 9 10
myvector contains: 4 5 7 8 9 10

------------- FT Vector (swap)-------------
Size of foo before     3
Capacity of foo before 3
Size of bar before     5
Capacity of bar before 5
SWAP!
Size of foo after      5
Capacity of foo after  5
Size of bar after      3
Capacity of bar after  3

foo contains: 200 200 200 200 200
bar contains: 100 100 100

------------- FT Vector (get_allocator)-------------
The manually allocated array contains: 0 1 2 3 4

------------- FT Vector (Relational operators)-------------
foo and bar are equal
foo is less than or equal to bar
foo is greater than or equal to bar

foo and baz are not equal
foo is less than baz
foo is less than or equal to baz



*************************************************************************
				Map
*************************************************************************

------------- FT Pair (constructor) -------------
The price of  is $0
The price of shoes is $39.9
The price of tomatoes is $2.3

------------- FT Pair (operator=) -------------
Home planet (should be Earth): Earth
Planet radius in km (should be 6371): 6371

------------- FT Pair (make_pair) -------------
foo: 10, 20
bar: 10, 65
bar: 10, 65

------------- FT Pair (relational operators) -------------
foo and bar are equal
foo is less than or equal to bar
foo is greater than or equal to bar

foo and baz are not equal
foo is greater than baz
foo is greater than or equal to baz

------------- FT Map (construct) -------------
First map is :
Second map is :
a	10
b	30
c	50
d	70
Third map is :
a	10
b	30
c	50
d	70

------------- FT Map (operator=) -------------
Size of first (should now be 0):                0
Size of second (should now contain 3 elements): 3

------------- FT Map (operator[]) -------------
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.

------------- FT Map (empty) -------------
Is map  empty (should be 0)?     0
Erasing pair a => 10
Erasing pair b => 20
Erasing pair c => 30
Is map now empty (should be 1)?  1

------------- FT Map (size) -------------
Size of mymap:   0
Size of mymap:   3
Size of mymap:   2

------------- FT Map (max_size) -------------
The maximum size our map could grow up to is 230584300921369395

------------- FT Map (insert) -------------
element 'z' already existed with a value of 200
mymap is of size (should be 2): 2

mymap now contains a, b, c and z:
a => 100
b => 300
c => 400
z => 200

anothermap now also contains a, b, c and z:
a => 100
b => 300
c => 400
z => 200

lastmap contains (check how is printed in order):
b => 300
d => 600
f => 500
j => 400
n => 200
r => 700
s => 100
y => 800

lastmap root is: n => 200

------------- FT Map (erase) -------------
Map should now only contain d and g
2 => d
6 => g

------------- FT Map (swap) -------------
foo contains now (should be 3 elements):
a => 11
b => 22
c => 33
bar contains now (should be 2 elements):
x => 100
y => 200

------------- FT Map (clear) -------------
mymap size: 3
mymap contains:
  x => 100
  y => 200
  z => 300
CLEAR!
mymap size: 0
mymap contains:

------------- FT Map (key_comp) -------------
browsing mymap using its key_comp funciton object:
a => 100
b => 200
c => 300

------------- FT Map (value_comp subclass) -------------
mymap contains:
x => 1001
y => 2002
z => 3003

------------- FT Map (find) -------------
mymap size: 3
elements in mymap:
  a => 50
  c => 100
  d => 150
b => end() iterator ? (should be 1): 1

------------- FT Map (count) -------------
mymap contains:
a => 101
c => 202
f => 303
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.

--------- FT Map (upper & lower bounds) ----------
mymap contains 
  a => 20
  c => 40
  e => 60
  g => 80
  i => 100
lower_bound(c):  c
lower_bound(d):  e
upper_bound(c):  e
upper_bound(d):  e

Range [c - g] erased. Map should now contains 'a' and 'i'
a => 20
i => 100

------------- FT Map (equal_range) -------------
mymap contains 
a => 10
b => 20
c => 30
lower bound to b points to: b => 20
upper bound to b points to: c => 30
